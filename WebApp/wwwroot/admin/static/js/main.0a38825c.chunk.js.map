{"version":3,"sources":["config.js","configuration/dataProvider/AdminHttpClient.ts","configuration/dataProvider/index.ts","authProvider.ts","pages/LoginForm.tsx","static/theme.ts","entities/pictures/PictureList.tsx","entities/pictures/PictureCreate.tsx","entities/users/UsersList.tsx","entities/users/UserShow.tsx","entities/record/RecordList.tsx","entities/consult/ConsultList.tsx","entities/massaguerType/MassagueTypeList.tsx","entities/massaguerType/MassagueTypeCreate.tsx","entities/massaguerType/MassagueTypeEdit.tsx","entities/massaguers/MassagueList.tsx","entities/massaguers/MassagueCreate.tsx","entities/massaguers/MassagueEdit.tsx","Layout/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdminHttpClient","url","options","headers","Headers","token","localStorage","getItem","set","fetchUtils","fetchJson","myDataProvider","jsonServerProvider","config","dataProvider","create","resource","params","formData","FormData","append","data","alt","file","rawFile","method","body","then","json","id","name","price","description","userId","occupation","update","firstName","lastName","login","username","password","captchaResult","request","Request","JSON","stringify","fetch","response","status","Error","accessToken","roles","setAuthData","logout","clearAuthData","Promise","resolve","checkError","error","reject","checkAuth","getToken","getPermissions","parse","removeItem","permissions","setItem","useStyles","makeStyles","theme","form","padding","input","marginTop","button","width","icon","marginRight","spacing","Input","meta","touched","inputProps","props","TextField","helperText","fullWidth","recaptchaRef","React","LoginForm","useSafeSetState","loading","setLoading","useLogin","translate","useTranslate","notify","useNotify","classes","onSubmit","values","catch","message","validate","errors","undefined","render","handleSubmit","e","preventDefault","current","execute","noValidate","className","autoFocus","component","label","disabled","type","autoComplete","reset","ref","size","sitekey","onChange","val","CardActions","Button","variant","color","CircularProgress","thickness","createMuiTheme","palette","primary","indigo","secondary","blue","PictureList","List","title","Datagrid","isRowSelectable","source","FunctionField","src","DeleteButton","PictureCreate","Create","SimpleForm","TextInput","required","ImageInput","multiple","PreviewImage","record","ImageField","UserList","sort","field","order","rowClick","DateField","UserShow","Show","SimpleShowLayout","RecordList","item","admin","includes","ReferenceField","link","reference","formatter","Intl","DateTimeFormat","timeZone","weekday","year","month","day","hour","minute","date","Date","format","ConsultList","MassagueTypeList","image","MassagueTypeCreate","redirect","multiline","MassagueTypeEdit","Edit","MassagueList","MassagueCreate","ReferenceInput","AutocompleteInput","optionText","MassagueEdit","Menu","onMenuClick","dense","useState","diseas","isXSmall","useMediaQuery","breakpoints","down","open","useSelector","state","ui","sidebarOpen","Box","mt","MenuItemLink","to","primaryText","onClick","sidebarIsOpen","leftIcon","russianMessages","require","i18nProvider","polyglotI18nProvider","LoginPage","Login","Fragment","App","Admin","authProvider","loginPage","menu","Resource","list","PostIcon","show","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0a38825c.chunk.js","sourcesContent":["export default {\r\n  baseApiUrl: \"/admin/api/v1\",\r\n  authUrl: \"/admin/api/v1/account/signIn\",\r\n  captchaKey: \"6Le9a8YaAAAAAJ_NSEj5vKvVIO4WbbnhyS1QULK2\",\r\n};\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { fetchUtils } from \"react-admin\";\r\n\r\nexport function AdminHttpClient(url: string, options: any = {}): any {\r\n  if (!options.headers) options.headers = new Headers();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  options.headers.set(\"Authorization\", `Bearer ${token}`);\r\n\r\n  return fetchUtils.fetchJson(url, options);\r\n}\r\n","// Core\r\nimport jsonServerProvider from \"ra-data-json-server\";\r\n\r\n// Components\r\nimport config from \"../../config\";\r\nimport { AdminHttpClient } from \"./AdminHttpClient\";\r\n\r\nconst myDataProvider = jsonServerProvider(config.baseApiUrl, AdminHttpClient);\r\nexport const dataProvider = {\r\n  ...myDataProvider,\r\n  create: (resource: any, params: any) => {\r\n    if (\r\n      resource !== \"imgs\" &&\r\n      resource !== \"masseurtype\" &&\r\n      resource !== \"masseur\"\r\n    ) {\r\n      return myDataProvider.create(resource, params);\r\n    }\r\n\r\n    if (resource === \"imgs\") {\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"alt\", params.data.alt);\r\n      formData.append(\"file\", params.data.file.rawFile);\r\n\r\n      return AdminHttpClient(`${config.baseApiUrl}/${resource}`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      }).then(({ json }: any) => ({\r\n        data: { ...params.data, id: json.id },\r\n      }));\r\n    } else if (resource === \"masseurtype\") {\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"name\", params.data.name);\r\n      formData.append(\"price\", params.data.price);\r\n      formData.append(\"description\", params.data.description);\r\n      formData.append(\"file\", params.data.file.rawFile);\r\n\r\n      return AdminHttpClient(`${config.baseApiUrl}/${resource}`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      }).then(({ json }: any) => ({\r\n        data: { ...params.data, id: json.id },\r\n      }));\r\n    } else {\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"userId\", params.data.userId);\r\n      formData.append(\"description\", params.data.description);\r\n      formData.append(\"occupation\", params.data.occupation);\r\n      formData.append(\"file\", params.data.file.rawFile);\r\n\r\n      return AdminHttpClient(`${config.baseApiUrl}/${resource}`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      }).then(({ json }: any) => ({\r\n        data: { ...params.data, id: json.id },\r\n      }));\r\n    }\r\n  },\r\n  update: (resource: any, params: any) => {\r\n    if (resource !== \"masseur\" && resource !== \"masseurtype\") {\r\n      return myDataProvider.update(resource, params);\r\n    }\r\n\r\n    if (resource === \"masseur\") {\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"occupation\", params.data.occupation);\r\n      formData.append(\"description\", params.data.description);\r\n      formData.append(\"firstName\", params.data.firstName);\r\n      formData.append(\"lastName\", params.data.lastName);\r\n      formData.append(\"file\", params.data.file?.rawFile);\r\n\r\n      return AdminHttpClient(`${config.baseApiUrl}/${resource}/${params.id}`, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n      }).then(({ json }: any) => ({\r\n        data: { ...params.data, id: json.id },\r\n      }));\r\n    } else {\r\n      let formData = new FormData();\r\n\r\n      formData.append(\"name\", params.data.name);\r\n      formData.append(\"price\", params.data.price);\r\n      formData.append(\"description\", params.data.description);\r\n      formData.append(\"file\", params.data.file?.rawFile);\r\n\r\n      return AdminHttpClient(`${config.baseApiUrl}/${resource}/${params.id}`, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n      }).then(({ json }: any) => ({\r\n        data: { ...params.data, id: json.id },\r\n      }));\r\n    }\r\n  },\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport config from \"./config\";\r\n\r\nexport default {\r\n    login: ({ username, password, captchaResult }: { username: string, password: string, captchaResult: string }) => {\r\n        const request = new Request(config.authUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'CaptchaResponse': captchaResult }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error('Неправильный логин или пароль');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ data: { accessToken, roles } }) => {\r\n                setAuthData(accessToken, roles);\r\n            });\r\n    },\r\n    logout: () => {\r\n        clearAuthData();\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error: any) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            clearAuthData();\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => {\r\n        return getToken() ? Promise.resolve() : Promise.reject();\r\n    },\r\n    getPermissions: () => {\r\n        const roles = getPermissions();\r\n        return roles ? Promise.resolve(JSON.parse(roles)) : Promise.resolve([]);\r\n    }\r\n};\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\nconst getPermissions = () => localStorage.getItem('permissions');\r\n\r\nconst clearAuthData = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('permissions');\r\n}\r\n\r\nconst setAuthData = (token: string, permissions: string[]) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('permissions', JSON.stringify(permissions));\r\n}\r\n","/* eslint-disable */\r\n\r\nimport * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, Form } from 'react-final-form';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslate, useLogin, useNotify, useSafeSetState, LoginComponent } from 'ra-core';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport config from '../config';\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme) => ({\r\n        form: {\r\n            padding: '0 1em 1em 1em',\r\n        },\r\n        input: {\r\n            marginTop: '1em',\r\n        },\r\n        button: {\r\n            width: '100%',\r\n        },\r\n        icon: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }),\r\n    { name: 'RaLoginForm' }\r\n);\r\n\r\nconst Input = ({\r\n    meta: { touched, error },\r\n    input: inputProps,\r\n    ...props\r\n}: {meta: any, input: any}) => (\r\n        <TextField\r\n            error={!!(touched && error)}\r\n            helperText={touched && error}\r\n            {...inputProps}\r\n            {...props}\r\n            fullWidth\r\n        />\r\n    );\r\n\r\nconst recaptchaRef: any = React.createRef();\r\n\r\nconst Captcha = (onSubmit: any) => (props: any) => (\r\n    <ReCAPTCHA\r\n        ref={recaptchaRef}\r\n        size=\"invisible\"\r\n        sitekey={config.captchaKey}\r\n        onChange={(val: any) => {\r\n            props.input.onChange(val);\r\n            onSubmit();\r\n        }}\r\n    />\r\n);\r\n\r\nconst LoginForm: LoginComponent = props => {\r\n    const [loading, setLoading] = useSafeSetState(false);\r\n    const login = useLogin();\r\n    const translate = useTranslate();\r\n    const notify = useNotify();\r\n    const classes = useStyles(props);\r\n\r\n    const validate = (values: FormData) => {\r\n        const errors: { username?: string, password?: string } = { username: undefined, password: undefined };\r\n\r\n        if (!values.username) {\r\n            errors.username = translate('ra.validation.required');\r\n        }\r\n        if (!values.password) {\r\n            errors.password = translate('ra.validation.required');\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const submit = (values: any) => {\r\n        setLoading(true);\r\n        login(values)\r\n            .then(() => {\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                notify(\r\n                    typeof error === 'string'\r\n                        ? error\r\n                        : typeof error === 'undefined' || !error.message\r\n                            ? 'ra.auth.sign_in_error'\r\n                            : error.message,\r\n                    'warning'\r\n                );\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onSubmit={submit}\r\n                validate={validate}\r\n                render={({ handleSubmit }) => (\r\n                    <form onSubmit={(e: any) => {\r\n                        e.preventDefault();\r\n                        recaptchaRef.current.execute();\r\n                    }} noValidate>\r\n                        <div className={classes.form}>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    autoFocus\r\n                                    id=\"username\"\r\n                                    name=\"username\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.username')}\r\n                                    disabled={loading}\r\n                                />\r\n                            </div>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.password')}\r\n                                    type=\"password\"\r\n                                    disabled={loading}\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                            </div>\r\n                            <Field name='captchaResult' component={Captcha(() => {\r\n                                handleSubmit();\r\n                                recaptchaRef.current.reset();\r\n                            })}/>\r\n                        </div>\r\n                        <CardActions>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                disabled={loading}\r\n                                className={classes.button}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress\r\n                                        className={classes.icon}\r\n                                        size={18}\r\n                                        thickness={2}\r\n                                    />\r\n                                )}\r\n                                {translate('ra.auth.sign_in')}\r\n                            </Button>\r\n                        </CardActions>\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: indigo,\r\n    secondary: blue\r\n  },\r\n});","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nexport const PictureList: React.FC = (props) => {\r\n  return (\r\n    <List {...props} title=\"Список картинок\">\r\n      <Datagrid isRowSelectable={() => false}>\r\n        <TextField source=\"alt\" label=\"Описание фотографии\" />\r\n        <FunctionField\r\n          render={(data: any) => (\r\n            <img\r\n              className=\"img\"\r\n              src={`/api/v1/imgs/${data.src}`}\r\n              alt={data.alt}\r\n            />\r\n          )}\r\n        />\r\n        <DeleteButton />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ImageInput,\r\n  ImageField,\r\n} from \"react-admin\";\r\n\r\nexport const PictureCreate: React.FC = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"alt\"\r\n        fullWidth\r\n        helperText=\"Опишите фотографию\"\r\n        label=\"Опишите фотографию\"\r\n      />\r\n      <ImageInput\r\n        source=\"file\"\r\n        multiple={false}\r\n        label=\"Фотография\"\r\n        validate={required()}\r\n      >\r\n        <PreviewImage source=\"src\" />\r\n      </ImageInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const UserList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      title=\"Список пользователей\"\r\n      sort={{ field: \"registrationDate\", order: \"DESC\" }}\r\n    >\r\n      <Datagrid rowClick=\"show\" isRowSelectable={() => false}>\r\n        <TextField label=\"Имя пользователя\" source=\"firstName\" />\r\n        <DateField label=\"Дата регистрации\" source=\"registrationDate\" />\r\n        {/* <FunctionField\r\n          render={(data: any) => (\r\n            <img width={200} src={`/api/v1/imgs/${data.src}`} alt={data.alt} />\r\n          )}\r\n        /> */}\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  SimpleShowLayout,\r\n  Show,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const UserShow: React.FC = (props) => {\r\n  return (\r\n    <Show {...props} title=\"Данные пользователя\">\r\n      <SimpleShowLayout>\r\n        <TextField label=\"Логин\" source=\"userName\" />\r\n        <TextField label=\"Имя\" source=\"firstName\" />\r\n        <TextField label=\"Фамилия\" source=\"lastName\" />\r\n        <DateField label=\"Дата регистрации\" source=\"registrationDate\" />\r\n        {/* <FunctionField\r\n          label='Картинка'\r\n          render={(data: any) => (\r\n            <img width={200} src={`/api/v1/imgs/${data.src}`} alt={data.alt} />\r\n          )}\r\n        /> */}\r\n      </SimpleShowLayout>\r\n    </Show>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  DateField,\r\n  ReferenceField,\r\n  FunctionField,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nexport const RecordList: React.FC = (props) => {\r\n  const item = localStorage.getItem(\"permissions\");\r\n  const permissions: string[] | undefined = item && JSON.parse(item);\r\n\r\n  const admin = permissions?.includes(\"Admin\");\r\n\r\n  return (\r\n    <List\r\n      sort={{ field: \"createdAt\", order: \"DESC\" }}\r\n      {...props}\r\n      title=\"Список запросов на запись\"\r\n    >\r\n      <Datagrid isRowSelectable={() => false}>\r\n        <ReferenceField\r\n          link=\"show\"\r\n          label=\"Пользователь\"\r\n          source=\"userId\"\r\n          reference=\"users\"\r\n        >\r\n          <TextField source=\"userName\" />\r\n        </ReferenceField>\r\n        <ReferenceField\r\n          label=\"Массажист\"\r\n          source=\"messeurId\"\r\n          reference=\"masseur\"\r\n        >\r\n          <FunctionField\r\n            render={(data: any) => `${data.firstName} ${data.lastName}`}\r\n          />\r\n        </ReferenceField>\r\n        <ReferenceField\r\n          label=\"Тип массажа\"\r\n          source=\"massageTypeId\"\r\n          reference=\"masseurtype\"\r\n        >\r\n          <TextField source=\"name\" />\r\n        </ReferenceField>\r\n        <DateField source=\"createdAt\" label=\"Дата создания\" />\r\n        <FunctionField\r\n          label=\"Дата записи\"\r\n          render={(data: any) => {\r\n            const formatter = new Intl.DateTimeFormat(\"ru\", {\r\n              timeZone: \"Asia/Vladivostok\",\r\n              weekday: \"long\",\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n              hour: \"numeric\",\r\n              minute: \"numeric\",\r\n            });\r\n            const date = new Date(data.date);\r\n\r\n            return formatter.format(date);\r\n          }}\r\n        />\r\n        {admin && <DeleteButton />}\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  DateField,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nexport const ConsultList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      sort={{ field: \"dateCreation\", order: \"DESC\" }}\r\n      {...props}\r\n      title=\"Список запросов на консультацию\"\r\n    >\r\n      <Datagrid isRowSelectable={() => false}>\r\n        <TextField source=\"phone\" label=\"Телефон\" />\r\n        <DateField source=\"dateCreation\" label=\"Дата создания\" />\r\n        <DeleteButton />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueTypeList: React.FC = (props) => {\r\n  return (\r\n    <List {...props} title=\"Список видов массажа\">\r\n      <Datagrid rowClick=\"edit\" isRowSelectable={() => false}>\r\n        <TextField source=\"name\" label=\"Название\" />\r\n        <FunctionField\r\n          render={(data: any) => (\r\n            <img\r\n              className=\"img\"\r\n              src={`/api/v1/imgs/${data.image}`}\r\n              alt={data.alt}\r\n            />\r\n          )}\r\n        />\r\n        <DeleteButton />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ImageInput,\r\n  NumberInput,\r\n  ImageField,\r\n  number,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueTypeCreate: React.FC = (props) => (\r\n  <Create {...props} title=\"Добавление вида массажа\">\r\n    <SimpleForm redirect=\"list\">\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"name\"\r\n        fullWidth\r\n        helperText=\"Название\"\r\n        label=\"Название\"\r\n      />\r\n      {/* <TextInput\r\n        validate={[required(), number()]}\r\n        source='price'\r\n        fullWidth\r\n        helperText='Цена'\r\n        label='Цена'\r\n      /> */}\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"description\"\r\n        fullWidth\r\n        multiline\r\n        helperText=\"Описание\"\r\n        label=\"Описание\"\r\n      />\r\n      <ImageInput\r\n        source=\"file\"\r\n        label=\"Картинка\"\r\n        multiple={false}\r\n        validate={required()}\r\n      >\r\n        <PreviewImage source=\"src\" />\r\n      </ImageInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  Edit,\r\n  required,\r\n  number,\r\n  SimpleForm,\r\n  TextInput,\r\n  NumberInput,\r\n  ImageInput,\r\n  ImageField,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueTypeEdit: React.FC = (props) => (\r\n  <Edit {...props} title=\"Редактирование вида массажа\">\r\n    <SimpleForm>\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"name\"\r\n        fullWidth\r\n        helperText=\"Название\"\r\n        label=\"Название\"\r\n      />\r\n      {/* <TextInput\r\n        validate={[required(), number()]}\r\n        source='price'\r\n        fullWidth\r\n        helperText='Цена'\r\n        label='Цена'\r\n      /> */}\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"description\"\r\n        fullWidth\r\n        multiline\r\n        helperText=\"Описание\"\r\n        label=\"Описание\"\r\n      />\r\n      <ImageInput source=\"file\" label=\"Картинка\" multiple={false}>\r\n        <PreviewImage source=\"src\" />\r\n      </ImageInput>\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DeleteButton,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueList: React.FC = (props) => {\r\n  return (\r\n    <List {...props} title=\"Список массажистов\">\r\n      <Datagrid rowClick=\"edit\" isRowSelectable={() => false}>\r\n        <TextField source=\"userName\" label=\"Имя пользователя\" />\r\n        <FunctionField\r\n          render={(data: any) => (\r\n            <img\r\n              className=\"img\"\r\n              src={`/api/v1/imgs/${data.src}`}\r\n              alt={data.alt}\r\n            />\r\n          )}\r\n        />\r\n        <DeleteButton />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  Create,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n  ImageInput,\r\n  ImageField,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueCreate: React.FC = (props) => (\r\n  <Create {...props} title=\"Добавление массажиста\">\r\n    <SimpleForm redirect=\"list\">\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"occupation\"\r\n        fullWidth\r\n        helperText=\"Введите род деятельности\"\r\n        label=\"Род деятельности\"\r\n      />\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"description\"\r\n        fullWidth\r\n        helperText=\"Введите краткое описание\"\r\n        label=\"О мастере\"\r\n        multiline\r\n      />\r\n      <ReferenceInput\r\n        label=\"Пользователь\"\r\n        source=\"userId\"\r\n        reference=\"users\"\r\n        validate={required()}\r\n      >\r\n        <AutocompleteInput optionText=\"userName\" />\r\n      </ReferenceInput>\r\n      <ImageInput\r\n        source=\"file\"\r\n        label=\"Фото\"\r\n        multiple={false}\r\n        validate={required()}\r\n      >\r\n        <PreviewImage source=\"src\" />\r\n      </ImageInput>\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {\r\n  Edit,\r\n  required,\r\n  SimpleForm,\r\n  TextInput,\r\n  ImageInput,\r\n  ImageField,\r\n} from \"react-admin\";\r\n\r\nexport const MassagueEdit: React.FC = (props) => (\r\n  <Edit {...props} title=\"Редактирование массажиста\">\r\n    <SimpleForm>\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"firstName\"\r\n        fullWidth\r\n        helperText=\"Имя\"\r\n        label=\"Имя\"\r\n      />\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"lastName\"\r\n        fullWidth\r\n        helperText=\"Фамилия\"\r\n        label=\"Фамилия\"\r\n      />\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"occupation\"\r\n        fullWidth\r\n        helperText=\"Введите род деятельности\"\r\n        label=\"Род деятельности\"\r\n      />\r\n      <TextInput\r\n        validate={required()}\r\n        source=\"description\"\r\n        fullWidth\r\n        helperText=\"Введите краткое описание\"\r\n        label=\"О мастере\"\r\n        multiline\r\n      />\r\n      <ImageInput source=\"file\" label=\"Фото\" multiple={false}>\r\n        <PreviewImage source=\"src\" />\r\n      </ImageInput>\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMediaQuery, Box } from \"@material-ui/core\";\r\nimport PhotoLibrary from \"@material-ui/icons/PhotoLibrary\";\r\nimport ViewCarousel from \"@material-ui/icons/ViewCarousel\";\r\nimport Forum from \"@material-ui/icons/Forum\";\r\nimport PermPhoneMsg from \"@material-ui/icons/PermPhoneMsg\";\r\nimport PeopleAlt from \"@material-ui/icons/PeopleAlt\";\r\nimport Work from \"@material-ui/icons/Work\";\r\nimport { useTranslate, MenuItemLink } from \"react-admin\";\r\nimport SubMenu from \"./SubMenu\";\r\n\r\nconst Menu: React.FC<any> = ({ onMenuClick, logout, dense = false }) => {\r\n  const [state, setState] = useState<{ [p: string]: boolean }>({\r\n    diseas: true,\r\n  });\r\n  const isXSmall = useMediaQuery((theme: any) => theme.breakpoints.down(\"xs\"));\r\n  const open = useSelector((state: any) => state.admin.ui.sidebarOpen);\r\n  useSelector((state: any) => state.theme); // force rerender on theme change\r\n\r\n  const handleToggle = (menu: string) => {\r\n    setState((state) => ({ ...state, [menu]: !state[menu] }));\r\n  };\r\n\r\n  const item = localStorage.getItem(\"permissions\");\r\n  const permissions: string[] | undefined = item && JSON.parse(item);\r\n\r\n  const admin = permissions?.includes(\"Admin\");\r\n\r\n  return (\r\n    <Box mt={1}>\r\n      <MenuItemLink\r\n        to={`/records`}\r\n        primaryText={\"Записи\"}\r\n        onClick={onMenuClick}\r\n        sidebarIsOpen={open}\r\n        dense={dense}\r\n        leftIcon={<PermPhoneMsg />}\r\n      />\r\n      {admin && (\r\n        <>\r\n          <MenuItemLink\r\n            to={`/imgs`}\r\n            primaryText={\"Фотографии салона\"}\r\n            onClick={onMenuClick}\r\n            sidebarIsOpen={open}\r\n            dense={dense}\r\n            leftIcon={<PhotoLibrary />}\r\n          />\r\n          <MenuItemLink\r\n            to={`/users`}\r\n            primaryText={\"Пользователи\"}\r\n            onClick={onMenuClick}\r\n            sidebarIsOpen={open}\r\n            dense={dense}\r\n            leftIcon={<PeopleAlt />}\r\n          />\r\n          <MenuItemLink\r\n            to={`/masseur`}\r\n            primaryText={\"Массажисты\"}\r\n            onClick={onMenuClick}\r\n            sidebarIsOpen={open}\r\n            dense={dense}\r\n            leftIcon={<Work />}\r\n          />\r\n          <MenuItemLink\r\n            to={`/masseurtype`}\r\n            primaryText={\"Виды массажа\"}\r\n            onClick={onMenuClick}\r\n            sidebarIsOpen={open}\r\n            dense={dense}\r\n            leftIcon={<ViewCarousel />}\r\n          />\r\n          <MenuItemLink\r\n            to={`/consult`}\r\n            primaryText={\"Консультации\"}\r\n            onClick={onMenuClick}\r\n            sidebarIsOpen={open}\r\n            dense={dense}\r\n            leftIcon={<Forum />}\r\n          />\r\n        </>\r\n      )}\r\n      {isXSmall && logout}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport { Admin, Resource, Login } from \"react-admin\";\r\nimport PostIcon from \"@material-ui/icons/Book\";\r\nimport polyglotI18nProvider from \"ra-i18n-polyglot\";\r\n\r\nimport { dataProvider } from \"./configuration\";\r\n\r\nimport authProvider from \"./authProvider\";\r\nimport LoginForm from \"./pages/LoginForm\";\r\n\r\nimport \"./App.css\";\r\nimport { theme } from \"./static/theme\";\r\n\r\nimport { PictureCreate, PictureList } from \"./entities/pictures\";\r\nimport { UserList, UserShow } from \"./entities/users\";\r\nimport { RecordList } from \"./entities/record\";\r\nimport { ConsultList } from \"./entities/consult\";\r\nimport {\r\n  MassagueTypeCreate,\r\n  MassagueTypeEdit,\r\n  MassagueTypeList,\r\n} from \"./entities/massaguerType\";\r\nimport {\r\n  MassagueList,\r\n  MassagueCreate,\r\n  MassagueEdit,\r\n} from \"./entities/massaguers\";\r\nimport { Menu } from \"./Layout\";\r\n\r\nconst russianMessages = require(\"ra-language-russian\");\r\n\r\nconst i18nProvider = polyglotI18nProvider(() => russianMessages, \"ru\");\r\n\r\nconst LoginPage = (props: any) => {\r\n  return (\r\n    <Login {...props}>\r\n      <React.Fragment>\r\n        <LoginForm {...props} />\r\n      </React.Fragment>\r\n    </Login>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <Admin\r\n      theme={theme}\r\n      dataProvider={dataProvider}\r\n      i18nProvider={i18nProvider}\r\n      authProvider={authProvider}\r\n      loginPage={LoginPage}\r\n      menu={Menu}\r\n    >\r\n      <Resource\r\n        name=\"records\"\r\n        list={RecordList}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Записи\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name=\"imgs\"\r\n        list={PictureList}\r\n        create={PictureCreate}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Фотографии салона\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name=\"users\"\r\n        list={UserList}\r\n        show={UserShow}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Пользователи\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name=\"masseur\"\r\n        list={MassagueList}\r\n        create={MassagueCreate}\r\n        edit={MassagueEdit}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Массажисты\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name=\"masseurtype\"\r\n        list={MassagueTypeList}\r\n        create={MassagueTypeCreate}\r\n        edit={MassagueTypeEdit}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Виды массажа\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name=\"consult\"\r\n        list={ConsultList}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Консультации\",\r\n        }}\r\n      />\r\n    </Admin>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}